# ================================================================
# Indexing API Deployment with High Availability
# Flask application with Gunicorn WSGI server
# ================================================================

apiVersion: apps/v1
kind: Deployment
metadata:
  name: indexer-api
  namespace: indexer
  labels:
    app: indexer-api
    component: api
    version: v1.0.0
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: indexer-api
      component: api
  template:
    metadata:
      labels:
        app: indexer-api
        component: api
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5002"
        prometheus.io/path: "/metrics"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - indexer-api
                topologyKey: kubernetes.io/hostname
            - weight: 50
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: component
                      operator: In
                      values:
                        - api
                topologyKey: topology.kubernetes.io/zone
      
      serviceAccountName: indexer-sa
      
      containers:
        - name: api
          image: devindexercontainerregistry.azurecr.io/indexer-api:v1.0.2
          imagePullPolicy: Always
          
          # Use gunicorn for Flask (WSGI)
          command: ["gunicorn"]
          args: 
            - "--bind"
            - "0.0.0.0:5002"
            - "--workers"
            - "2"
            - "--threads"
            - "4"
            - "--timeout"
            - "120"
            - "--access-logfile"
            - "-"
            - "--error-logfile"
            - "-"
            - "src.api.app:app"
          
          ports:
            - name: http
              containerPort: 5002
              protocol: TCP
          
          env:
            - name: PYTHONUNBUFFERED
              value: "1"
            - name: PYTHONPATH
              value: "/app"
            - name: FLASK_APP
              value: "src.api.app:app"
            - name: FLASK_ENV
              value: "production"
            
            # Azure OpenAI from Secret
            - name: AZURE_OPENAI_ENDPOINT
              valueFrom:
                secretKeyRef:
                  name: indexer-secrets
                  key: AZURE_OPENAI_ENDPOINT
            - name: AZURE_OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: indexer-secrets
                  key: AZURE_OPENAI_API_KEY
            - name: AZURE_OPENAI_API_VERSION
              valueFrom:
                secretKeyRef:
                  name: indexer-secrets
                  key: AZURE_OPENAI_API_VERSION
            - name: AZURE_OPENAI_EMBEDDING_DEPLOYMENT
              valueFrom:
                secretKeyRef:
                  name: indexer-secrets
                  key: AZURE_OPENAI_EMBEDDING_DEPLOYMENT
            - name: AZURE_OPENAI_GPT4_DEPLOYMENT
              valueFrom:
                secretKeyRef:
                  name: indexer-secrets
                  key: AZURE_OPENAI_GPT4_DEPLOYMENT
            
            # Azure Search from Secret
            - name: AZURE_SEARCH_ENDPOINT
              valueFrom:
                secretKeyRef:
                  name: indexer-secrets
                  key: AZURE_SEARCH_ENDPOINT
            - name: AZURE_SEARCH_KEY
              valueFrom:
                secretKeyRef:
                  name: indexer-secrets
                  key: AZURE_SEARCH_KEY
            - name: AZURE_SEARCH_API_VERSION
              valueFrom:
                secretKeyRef:
                  name: indexer-secrets
                  key: AZURE_SEARCH_API_VERSION
            
            # Azure Storage from Secret
            - name: AZURE_STORAGE_ACCOUNT_NAME
              valueFrom:
                secretKeyRef:
                  name: indexer-secrets
                  key: AZURE_STORAGE_ACCOUNT_NAME
            - name: AZURE_STORAGE_CONNECTION_STRING
              valueFrom:
                secretKeyRef:
                  name: indexer-secrets
                  key: AZURE_STORAGE_CONNECTION_STRING
            - name: AZURE_STORAGE_ENDPOINT
              valueFrom:
                secretKeyRef:
                  name: indexer-secrets
                  key: AZURE_STORAGE_ENDPOINT
            
            # JWT Secret
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: indexer-secrets
                  key: JWT_SECRET
            
            # ConfigMap values
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: indexer-config
                  key: LOG_LEVEL
                  optional: true
            - name: MAX_WORKERS
              valueFrom:
                configMapKeyRef:
                  name: indexer-config
                  key: MAX_WORKERS
                  optional: true
          
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "1000m"
          
          livenessProbe:
            httpGet:
              path: /health
              port: 5002
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
          
          readinessProbe:
            httpGet:
              path: /health
              port: 5002
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false

---
apiVersion: v1
kind: Service
metadata:
  name: indexer-api-service
  namespace: indexer
  labels:
    app: indexer-api
    component: api
spec:
  type: ClusterIP
  selector:
    app: indexer-api
    component: api
  ports:
    - name: http
      protocol: TCP
      port: 5002
      targetPort: 5002
  sessionAffinity: None

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: indexer-api-hpa
  namespace: indexer
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: indexer-api
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 2
        periodSeconds: 15
      selectPolicy: Max
